@using EFurni.Presentation.Clients.ClientInterfaces
@namespace EFurni.Presentation.Components.Login
@inject NotificationService notificationService
@inject NavigationManager NavigationManager
@inject IAuthenticationClient AuthenticationClient

<RadzenNotification></RadzenNotification>
<section class="login_part padding_top" style="background-color: #f5f5f7">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-3 col-md-3" style="visibility: hidden">
                <div class="login_part_text text-center">
                    <div class="login_part_text_iner">
                        <h2>New to our Shop?</h2>
                        <p>
                            There are advances being made in science and technology
                            everyday, and a good example of this is the
                        </p>
                        <a href="#" class="btn_3">Create an Account</a>
                    </div>
                </div>
            </div>
            <div class="col-lg-6 col-md-6">
                <div class="login_part_form" style="padding-bottom: 0px;margin-bottom: -160px;">
                    <div class="login_part_form_iner">
                        <h3 style="margin-top:-270px;margin-bottom: 60px;">
                            Register
                        </h3>
                        <div class="row contact_form">
                            <div class="col-md-12 form-group p_star">
                                <RadzenTextBox @bind-Value=@UserName Placeholder="Email" style="width:405px"></RadzenTextBox>
                            </div>
                            <div class="col-md-12 form-group p_star">
                                <RadzenPassword @bind-Value=@Password Placeholder="Password" style="width:405px"></RadzenPassword>
                            </div>
                            <div class="col-md-12 form-group p_star mt-3">
                                <RadzenTextBox @bind-Value=@FirstName Placeholder="First Name" style="width:405px"></RadzenTextBox>
                            </div>
                            <div class="col-md-12 form-group p_star">
                                <RadzenTextBox @bind-Value=@LastName Placeholder="Last Name" style="width:405px"></RadzenTextBox>
                            </div>

                            <div class="col-md-12 form-group p_star mt-3">
                                <RadzenTextBox @bind-Value=@Phone Placeholder="Phone Number" style="width:405px"></RadzenTextBox>
                            </div>
                            <div class="col-md-12 form-group">
                                <div class="creat_account d-flex align-items-center">
                                </div>
                                <div class="btn_1 mt-3" @onclick="@(async () => await RegisterApply())">
                                    Register
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code
{
    string UserName { get; set; }
    string Password { get; set; }
    string FirstName { get; set; }
    string LastName { get; set; }
    string Phone { get; set; }

    private async Task RegisterApply()
    {
        var notification = new NotificationMessage {Duration = 12000};
        var responseTuple =await AuthenticationClient.Register(UserName, Password, FirstName, LastName, Phone);

        if (!responseTuple.Item1)
        {
            notification.Summary = "Failed";
            notification.Detail = responseTuple.Item2;
            notification.Severity = NotificationSeverity.Error;

            await ShowNotification(notification);
            StateHasChanged();
        }
        else
        {
            notification.Summary = "Success";
            notification.Detail = "Logged in redirecting..";
            notification.Severity = NotificationSeverity.Success;

            await ShowNotification(notification);
            await Task.Delay(1500);
            NavigationManager.NavigateTo("/", true);
        }

    }

    private async Task ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
        await InvokeAsync(StateHasChanged);
    }

}
